#!/bin/bash
##############################################################################
# Author: Sepahrad Salour 			          		     #
# Website: http://www.salour.net                        		     #
# Version: 1.0                     			                     #
##############################################################################
# Checking Privileges 
if [[ ${UID} -ne 0 ]]; then
        echo $"You do not have sufficient privileges."
        exit 1
fi

# Checking Dialog package
rpm -q dialog >/dev/null 2>&1
[[ $? -ne 0 ]] && echo -e "\e[31mDialog package isn't installed, Exiting... \e[37m" && exit 1

DEVNUM=$(ls -d /sys/class/net/eth* | wc -w 2>/dev/null)				# Number of ethernet cards
butflag=0									# Button flag for save button in main dialog command

# Function(s)
# This function shows the error message in msgbox with dialog command
# USAGE: error
function error(){
	dialog --clear --backtitle "Redhat Network Configuration" --msgbox "Network service didn't run succesfully! Please check your settings." 5 75
}

# This function draws a please_wait progress with dialog command
# USAGE: please_wait
function please_wait(){

        for((i = 0; i < 4; i++)); do
                # We can't use --clear option with --infobox in dialog command
                dialog --backtitle "Redhat Network Configuration" --infobox "Please Wait`for((j = 0; j <= i; j++)); do echo -n .; done`" 3 20 && sleep 0.5
        done
}

# This function shows the restore backup progress with dialog command
# USAGE: restore_backup <interface>
function restore_backup(){
	local i j
	for((i = 0; i < 4; i++)); do
		# We can't use --clear with --infobox option together in dialog command
		dialog --backtitle "Redhat Network Configuration" --infobox "Restoring ${1} backup`for((j = i; j < 4; j++)); do echo -n .; done`" 3 45 && sleep 0.25
	done
}

# This function shows the serious problem message in msgbox with dialog command
# USAGE: serious_problem
function serious_problem(){
	dialog --clear --backtitle "Redhat Network Configuration" --msgbox "There are some serious problems! Please contact to administrator." 5 75
}

# This function shows the success message in msgbox with dialog command
# USAGE: success
function success(){
	dialog --clear --backtitle "Redhat Network Configuration" --msgbox "Network settings is succesfully changed." 5 50
}

# This function show the error message in msgbox with dialog command
# USAGE: error
# RETURN: 0 on yes button
#	  non-zero on no button
function confirm(){
	dialog --backtitle "Redhat Network Configuration" --yesno "Attention: Bad configuration will cause inaccessibility of server! Do you proceed?" 5 90
	return $?
}

# This function search the value of parameter in network config file 
# USAGE: search <parameter-to-search> [file-address]
function search(){
	local ADD="/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
	[[ ! -z "$2" ]] && ADD="$2"
	local VALUE=$(cat "${ADD}" | grep "$1" | cut -d'=' -f2)
	
	echo "${VALUE#$1=}" | tr -d \" | tr -d ' '
}

i=0	# Counter for counting the menu execution
while true; do

	# NIC Selection Dialog 

	exec 3>&1

	DEVNAME=$(dialog --clear --backtitle "Redhat Network Configuration" `[[ ${butflag} -eq 3 ]] && echo --extra-button --extra-label "Save"` \
	--title "[ NIC Selection ]" \
	--menu "Select your network interface:" 14 38 6 \
	`for((i = 0; i < ${DEVNUM}; i++)); do
		opstate=$(cat /sys/class/net/eth${i}/operstate)
		if [[ "${opstate}" == "up" ]]; then
			echo -n eth${i} NIC-${i}-\(Connected\)
		elif [[ "${opstate}" == "down" ]]; then
			echo -n eth${i} NIC-${i}-\(Disconnected\)
		else
			echo -n eth${i} Network_Interface_Card-${i}
		fi
		echo 	# New line 
	done` 2>&1 1>&3)
	mainstat=$?
	exec 3>&-
	
	[[ "${DEVNAME}" != "${olddev}" ]] && i=0	# Counter be equal to zero if user choose another device
	olddev="${DEVNAME}"

	# status = 1 means cancel button pressed
	# status = 3 means save button pressed
	# status = 255 means ESC key pressed
	[[ ( ${mainstat} -eq 1 ) || ( ${mainstat} -eq 3 ) || ( ${mainstat} -eq 255 ) ]] && break

	# Checking and Creating Network Files 
	grep '# Generated by network-redhat' /etc/sysconfig/network-scripts/ifcfg-${DEVNAME} >/dev/null 2>&1
	stat=$?	

	if [[ ! -e "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}" ]]; then
		touch "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
		echo '# Generated by network-redhat' >> "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
		echo DEVICE="${DEVNAME}" >> "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
		echo HWADDR="$(set `ifconfig "${DEVNAME}"` && echo $5 )" >> "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
	elif [[ ${stat} -ne 0 ]]; then	# If exists and status of upper grep is non-zero
		sed -i "1 i # Generated by network-redhat" "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
	fi

	grep 'DEVICE' "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}" > /dev/null 2>&1
	stat=$?
	
	if [[ ${stat} -ne 0 ]]; then
		sed -i "1 i DEVICE=${DEVNAME}" "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
	fi

	# Starting Network Configuration Dialog 
	while true; do
		# Variables
		# Extracting default values if exists and assigning to the variables
		DEVICE="$(search DEVICE)"	
		HWADDR="$(set `ifconfig ${DEVNAME}` && echo $5)" 
		ONBOOT="$(search ONBOOT `[[ -e "${NETTMPFILE}" ]] && echo "${NETTMPFILE}"`)"
		IPADDR="$(search IPADDR `[[ -e "${NETTMPFILE}" ]] && echo "${NETTMPFILE}"`)"
		NETMASK="$(search NETMASK `[[ -e "${NETTMPFILE}" ]] && echo "${NETTMPFILE}"`)"
		GATEWAY="$(search GATEWAY `[[ -e "${NETTMPFILE}" ]] && echo "${NETTMPFILE}"`)"
		DNS1="$(search DNS1 `[[ -e "${NETTMPFILE}" ]] && echo "${NETTMPFILE}"`)"
		DNS2="$(search DNS2 `[[ -e "${NETTMPFILE}" ]] && echo "${NETTMPFILE}"`)"
		NETTMPFILE="/tmp/net.tmp.$$.${DEVNAME}"
		INFADD="/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}"
		TMPINFADD="/tmp/ifcfg-${DEVNAME}.bk"
	
			
		# Network Configuration Dialog 
		dialog --clear --backtitle "Redhat Network Configuration" \
			  --title "Network Configuration Menu" \
			  --mixedform "Network Configuration:" \
		15 50 0 \
			"DEVICE Name:" 	 1 1	"${DEVICE}" 	1 16 25 0 2 \
			"HWADDR:"	 2 1	"${HWADDR}"	2 16 25 0 2 \
			"BOOT:"    	 3 1	"${ONBOOT}" 	3 16 25 0 0 \
			"IP Address:"    4 1	"${IPADDR}" 	4 16 25 0 0 \
			"NetMask:"	 5 1	"${NETMASK}"    5 16 25 0 0 \
			"GateWay:"	 6 1	"${GATEWAY}"    6 16 25 0 0 \
			"Primary DNS:"   7 1 	"${DNS1}" 	7 16 25 0 0 \
			"Secondary DNS:" 8 1 	"${DNS2}" 	8 16 25 0 0 \
		2>${NETTMPFILE}
		stat=$?
		
		# If this is the first execution of menu it copies original ifcfg to tmp
		if [[ ( ${i} -eq 0 ) && ( ! -e /tmp/ifcfg-${DEVNAME}.org.$$  ) ]]; then
			cp "/etc/sysconfig/network-scripts/ifcfg-${DEVNAME}" "/tmp/ifcfg-${DEVNAME}.org.$$"
		fi

		let i++		# Increment i by one for menu execution

		# Adding following line
		sed -i "1 i # Generated by network-redhat" ${NETTMPFILE}
		
		# Removing white spaces
		# If not removing unnecessary white space some parameters like yes asumes as a command!
		sed -i 's/^[ \t]*//' ${NETTMPFILE}

		[[ ( ${stat} -eq 1 ) || ( ${stat} -eq 255 ) ]] && rm -f "${NETTMPFILE}" && break

		# Configuring net file 
		gawk -F '=' '{if (NR==1) {printf("# Generated by network-redhat\n")}
			      if (NR==2) {printf("DEVICE=%s\n",$0)}
			      if (NR==3) {printf("HWADDR=%s\n",$0)}
			      if (NR==4 && length($2)==0) {printf("ONBOOT=%s\n",$0)}
			      if (NR==5 && length($2)==0) {printf("IPADDR=%s\n",$0)}
		              if (NR==6 && length($2)==0) {printf("NETMASK=%s\n",$0)}
			      if (NR==7 && length($2)==0) {printf("GATEWAY=%s\n",$0)}
			      if (NR==8 && length($2)==0) {printf("DNS1=%s\n",$0)}
			      if (NR==9 && length($2)==0) {printf("DNS2=%s\n",$0)}
			     }' ${NETTMPFILE} > ${NETTMPFILE}.swp
		
		mv -f "${NETTMPFILE}.swp" "${NETTMPFILE}"

		# Confirm to continue 
		[[ ${stat} -eq 0 ]] && confirm || continue 

		# Creating backup & Accepting 
		diff "${NETTMPFILE}" "${INFADD}" >/dev/null 2>&1
		stat=$?

		cp -f "${INFADD}" "${TMPINFADD}"
		mv -f "${NETTMPFILE}" "${INFADD}"
		
		# butflag is for save button
		[[ ${stat} -ne 0 ]] && butflag=3
		
		break
	done

done

# Checking files and accepting 
if [[ ${mainstat} -eq 3 ]]; then
	please_wait
	/etc/init.d/network restart > /dev/null 2>&1
	stat=$?
	
	# Restoring backup files if network script didn't restart properly
	if [[ ${stat} -ne 0 ]]; then
		error
		/etc/init.d/network stop >/dev/null 2>&1

		# Following for checking original(First Files) ifcfg-eth* files and copies them to .bk extention
		for i in /tmp/ifcfg-eth*.org.$$; do	
			[[ ! -e "${i}" ]] && continue
			device=$(basename "${i}" | cut -d'-' -f2 | cut -d'.' -f1 )	# Extracting device name from address
			mv -f "${i}" "/tmp/ifcfg-${device}.bk"
		done

		# Rollback the backup files
		for i in /tmp/ifcfg-eth*.bk; do
			[[ ! -e "${i}" ]] && continue
			file=$(basename "${i}" | cut -d. -f1)
			restore_backup $(echo "${file}" | cut -d'-' -f2)
			mv -f /tmp/"${file}".bk /etc/sysconfig/network-scripts/"${file}" >/dev/null 2>&1
		done
		
		/etc/init.d/network start >/dev/null 2>&1
		stat=$?

		if [[ ${stat} -ne 0 ]]; then
			serious_problem
			exit 1
		fi
	else
		success
		rm -f "${TMPINFADD}" "/tmp/ifcfg-*.org.$$"
		exit 0
	fi
fi

# Restoring backup if main cancel button pressed
if [[ ${mainstat} -eq 1 ]]; then
	# Following for checking original(First Files) ifcfg-eth* files and copies them to .bk extention
	for i in /tmp/ifcfg-eth*.org.$$; do	
		[[ ! -e "${i}" ]] && continue
		device=$(basename "${i}" | cut -d'-' -f2 | cut -d'.' -f1 )	# Extracting device name from address
		mv -f "${i}" "/tmp/ifcfg-${device}.bk"
	done

	# Restoring backup files
	for i in /tmp/ifcfg-eth*.bk; do
		[[ ! -e "${i}" ]] && continue
		file=$(basename "${i}" | cut -d. -f1)
		mv -f /tmp/"${file}".bk /etc/sysconfig/network-scripts/"${file}" >/dev/null 2>&1
	done
fi
